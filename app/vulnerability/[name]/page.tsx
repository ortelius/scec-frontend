'use client'

import { useParams, useRouter, useSearchParams } from 'next/navigation'
import { useState, useEffect } from 'react'

import Header from '@/components/Header'
import { getRelativeTime } from '@/lib/dataTransform'

interface VulnerabilityDetails {
  cve_id: string
  summary: string
  details: string
  severity_score: number
  severity_rating: string
  cvss_v3_score?: string
  published: string
  modified: string
  aliases: string[]
  package: string
  affected_version: string
  full_purl: string
  fixed_in: string[]
  affected_releases: Array<{
    release_name: string
    release_version: string
    endpoint_count: number
  }>
  references: string[]
  cwe_ids: string[]
}

export default function VulnerabilityDetailPage() {
  const params = useParams()
  const router = useRouter()
  const searchParams = useSearchParams()
  const [searchQuery, setSearchQuery] = useState('')
  const [vulnerability, setVulnerability] = useState<VulnerabilityDetails | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const vulnName = params.name as string
  const version = searchParams.get('version') || 'latest'

  const handleSearch = () => {
    router.push('/')
  }

  // Fetch vulnerability data (placeholder - replace with actual GraphQL query)
  useEffect(() => {
    const fetchVulnerability = async () => {
      try {
        setLoading(true)
        setError(null)

        // Placeholder data - replace with actual GraphQL query
        const mockData: VulnerabilityDetails = {
          cve_id: `CVE-2024-${Math.floor(Math.random() * 10000)}`,
          summary: 'Critical security vulnerability in authentication module',
          details: 'This vulnerability allows an attacker to bypass authentication mechanisms through a specially crafted request. The vulnerability exists in versions prior to the fixed release and affects all installations using the default configuration.',
          severity_score: 9.8,
          severity_rating: 'critical',
          cvss_v3_score: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
          published: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
          modified: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
          aliases: ['GHSA-xxxx-yyyy-zzzz'],
          package: vulnName,
          affected_version: version,
          full_purl: `pkg:npm/${vulnName}@${version}`,
          fixed_in: ['2.0.1', '1.9.5'],
          affected_releases: [
            { release_name: vulnName, release_version: '1.9.4', endpoint_count: 12 },
            { release_name: vulnName, release_version: '1.9.3', endpoint_count: 8 },
            { release_name: vulnName, release_version: '1.9.2', endpoint_count: 5 },
          ],
          references: [
            'https://nvd.nist.gov/vuln/detail/CVE-2024-1234',
            'https://github.com/advisories/GHSA-xxxx-yyyy-zzzz',
            'https://example.com/security-advisory',
          ],
          cwe_ids: ['CWE-287', 'CWE-306'],
        }

        setVulnerability(mockData)
      } catch (err) {
        console.error('Error fetching vulnerability:', err)
        setError(err instanceof Error ? err.message : 'Failed to fetch vulnerability data')
      } finally {
        setLoading(false)
      }
    }

    if (vulnName) {
      fetchVulnerability()
    }
  }, [vulnName, version])

  const getSeverityColor = (rating: string) => {
    const ratingLower = rating.toLowerCase()
    if (ratingLower === 'critical') return 'bg-red-100 text-red-800 border-red-200'
    if (ratingLower === 'high') return 'bg-orange-100 text-orange-800 border-orange-200'
    if (ratingLower === 'medium') return 'bg-yellow-100 text-yellow-800 border-yellow-200'
    if (ratingLower === 'low') return 'bg-blue-100 text-blue-800 border-blue-200'
    return 'bg-gray-100 text-gray-800 border-gray-200'
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-white">
        <Header searchQuery={searchQuery} setSearchQuery={setSearchQuery} handleSearch={handleSearch} />
        <div className="container mx-auto px-6 py-12">
          <div className="flex items-center justify-center py-12">
            <div className="text-center">
              <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <p className="mt-4 text-gray-600">Loading vulnerability details...</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (error || !vulnerability) {
    return (
      <div className="min-h-screen bg-white">
        <Header searchQuery={searchQuery} setSearchQuery={setSearchQuery} handleSearch={handleSearch} />
        <div className="container mx-auto px-6 py-12">
          <h1 className="text-2xl font-bold">Vulnerability not found</h1>
          <p className="mt-2 text-gray-600">{error || 'The requested vulnerability could not be found.'}</p>
          <button
            onClick={() => router.back()}
            className="mt-4 text-blue-600 hover:text-blue-700"
          >
            ← Back to search
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-white">
      <Header searchQuery={searchQuery} setSearchQuery={setSearchQuery} handleSearch={handleSearch} />

      <div className="container mx-auto px-6 py-6 max-w-7xl">
        <button
          onClick={() => router.back()}
          className="flex items-center gap-2 text-blue-600 hover:text-blue-700 mb-6"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
          </svg>
          Back to search
        </button>

        <div className="bg-white border border-gray-200 rounded-lg p-8">
          <div className="flex items-start justify-between mb-6">
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-2">
                <h1 className="text-4xl font-bold text-gray-900">{vulnerability.cve_id}</h1>
                <span className={`px-3 py-1 rounded text-sm font-bold border ${getSeverityColor(vulnerability.severity_rating)}`}>
                  {vulnerability.severity_rating.toUpperCase()} {vulnerability.severity_score.toFixed(1)}
                </span>
              </div>
              <p className="text-xl text-gray-700 mb-4">{vulnerability.summary}</p>
              <div className="flex items-center gap-4 text-sm text-gray-600">
                <span>Published {getRelativeTime(vulnerability.published)}</span>
                <span>•</span>
                <span>Modified {getRelativeTime(vulnerability.modified)}</span>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8 pb-8 border-b border-gray-200">
            <div className="bg-red-50 p-4 rounded-lg border border-red-200">
              <div className="text-sm text-red-600 mb-1 font-medium">Affected Releases</div>
              <div className="text-3xl font-bold text-red-900">{vulnerability.affected_releases.length}</div>
            </div>
            <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
              <div className="text-sm text-orange-600 mb-1 font-medium">Total Endpoints</div>
              <div className="text-3xl font-bold text-orange-900">
                {vulnerability.affected_releases.reduce((sum, r) => sum + r.endpoint_count, 0)}
              </div>
            </div>
            <div className="bg-green-50 p-4 rounded-lg border border-green-200">
              <div className="text-sm text-green-600 mb-1 font-medium">Fixed Versions</div>
              <div className="text-3xl font-bold text-green-900">{vulnerability.fixed_in.length}</div>
            </div>
          </div>

          <div className="mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Description</h2>
            <p className="text-gray-700 leading-relaxed">{vulnerability.details}</p>
          </div>

          <div className="mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Technical Details</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="border border-gray-200 rounded-lg p-4">
                <div className="text-sm text-gray-600 mb-1">Package</div>
                <div className="font-semibold text-gray-900">{vulnerability.package}</div>
              </div>
              <div className="border border-gray-200 rounded-lg p-4">
                <div className="text-sm text-gray-600 mb-1">Affected Version</div>
                <div className="font-semibold text-gray-900">{vulnerability.affected_version}</div>
              </div>
              {vulnerability.cvss_v3_score && (
                <div className="border border-gray-200 rounded-lg p-4 md:col-span-2">
                  <div className="text-sm text-gray-600 mb-1">CVSS v3 Vector</div>
                  <div className="font-mono text-sm text-gray-900 break-all">{vulnerability.cvss_v3_score}</div>
                </div>
              )}
              <div className="border border-gray-200 rounded-lg p-4 md:col-span-2">
                <div className="text-sm text-gray-600 mb-1">PURL</div>
                <div className="font-mono text-sm text-gray-900 break-all">{vulnerability.full_purl}</div>
              </div>
            </div>
          </div>

          {vulnerability.cwe_ids && vulnerability.cwe_ids.length > 0 && (
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-4">CWE IDs</h2>
              <div className="flex flex-wrap gap-2">
                {vulnerability.cwe_ids.map((cwe, index) => (
                  <span key={index} className="px-3 py-1 bg-purple-100 text-purple-800 rounded text-sm font-medium">
                    {cwe}
                  </span>
                ))}
              </div>
            </div>
          )}

          {vulnerability.aliases && vulnerability.aliases.length > 0 && (
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-4">Aliases</h2>
              <div className="flex flex-wrap gap-2">
                {vulnerability.aliases.map((alias, index) => (
                  <span key={index} className="px-3 py-1 bg-gray-100 text-gray-800 rounded text-sm font-medium">
                    {alias}
                  </span>
                ))}
              </div>
            </div>
          )}

          {vulnerability.fixed_in && vulnerability.fixed_in.length > 0 && (
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-4">Fixed In</h2>
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex flex-wrap gap-2">
                  {vulnerability.fixed_in.map((version, index) => (
                    <span key={index} className="px-3 py-1 bg-green-100 text-green-800 rounded text-sm font-bold">
                      {version}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          )}

          <div className="mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Affected Releases</h2>
            <div className="space-y-3">
              {vulnerability.affected_releases.map((release, index) => (
                <div 
                  key={index}
                  onClick={() => router.push(`/release/${release.release_name}?version=${encodeURIComponent(release.release_version)}`)}
                  className="border border-gray-200 rounded-lg p-4 hover:border-gray-400 hover:shadow-md transition-all cursor-pointer"
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="font-semibold text-gray-900">{release.release_name}</h3>
                      <p className="text-sm text-gray-600">Version: {release.release_version}</p>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-gray-900">{release.endpoint_count}</div>
                      <div className="text-sm text-gray-600">endpoints affected</div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {vulnerability.references && vulnerability.references.length > 0 && (
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-4">References</h2>
              <div className="space-y-2">
                {vulnerability.references.map((ref, index) => (
                  <a
                    key={index}
                    href={ref}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="block text-blue-600 hover:text-blue-700 hover:underline text-sm break-all"
                  >
                    {ref}
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
